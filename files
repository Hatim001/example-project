"use client"
import { ReactNode } from "react"
import { SidebarProvider, SidebarInset } from "@/components/ui/sidebar"
import AppSidebar from "@/components/layout/app-sidebar"
import { Button } from "@/components/ui/button"
import { Separator } from "@/components/ui/separator"
import { Menu } from 'lucide-react'
import { useAuth } from "@/components/auth/auth-context"

type Props = { children: ReactNode }

export default function AppShell({ children }: Props) {
  const { logout, userEmail } = useAuth()

  return (
    <SidebarProvider>
      <AppSidebar />
      <SidebarInset>
        <header className="flex h-14 shrink-0 items-center gap-2 border-b px-3">
          <Button variant="ghost" size="icon" className="md:hidden">
            <Menu className="h-5 w-5" />
            <span className="sr-only">Menu</span>
          </Button>
          <Separator orientation="vertical" className="h-5" />
          <div className="text-sm font-medium">Dashboard</div>
          <div className="ml-auto flex items-center gap-2">
            <span className="text-sm text-muted-foreground hidden sm:inline-block">{userEmail}</span>
            <Button variant="outline" size="sm" onClick={logout}>
              Logout
            </Button>
          </div>
        </header>
        <main className="flex-1 p-3 md:p-4">{children}</main>
      </SidebarInset>
    </SidebarProvider>
  )
}

"use client"

import type React from "react"
import { BrowserRouter, Navigate, Outlet, Route, Routes } from "react-router-dom"
import { Toaster } from "@/components/ui/toaster"
import { AuthProvider, useAuth } from "@/components/auth/auth-context"
import LoginPage from "@/components/pages/login-page"
import AppShell from "@/components/layout/app-shell"
import DashboardHome from "@/components/pages/dashboard-home"
import SimplePage from "@/components/pages/simple-page"

export default function Page() {
  return (
    <AuthProvider>
      <BrowserRouter>
        <Routes>
          <Route path="/" element={<LoginPage />} />
          {/* Protected layout route keeps the sidebar mounted once */}
          <Route element={<ProtectedLayout />}>
            <Route path="/dashboard">
              <Route index element={<DashboardHome />} />
              <Route path="settings" element={<SimplePage title="Settings" />} />
              <Route path="profile" element={<SimplePage title="Profile" />} />
              <Route path="search" element={<SimplePage title="Search" />} />
              <Route path="help" element={<SimplePage title="Help" />} />
              <Route path="user" element={<SimplePage title="User Profile" />} />
            </Route>
          </Route>
          <Route path="*" element={<Navigate to="/" replace />} />
        </Routes>
      </BrowserRouter>
      <Toaster />
    </AuthProvider>
  )
}

function ProtectedLayout() {
  const { isAuthenticated } = useAuth()
  if (!isAuthenticated) return <Navigate to="/" replace />
  // Sidebar renders once here; children (routes) change inside it
  return (
    <AppShell>
      <Outlet />
    </AppShell>
  )
}

import React from "react"
import { useNavigate } from "react-router-dom"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Form, Formik } from "formik"
import * as Yup from "yup"

const LoginPageSchema = Yup.object().shape({
  email: Yup.string().email("Invalid email address").required("Email is required"),
  password: Yup.string().required("Password is required"),
})

export default function LoginPage() {
  const navigate = useNavigate()

  return (
    <div className="flex min-h-screen items-center justify-center bg-background">
      <Formik
        initialValues={{ email: "", password: "" }}
        validationSchema={LoginPageSchema}
        onSubmit={(values) => {
          // Simulate login
          setTimeout(() => {
            navigate("/dashboard", { replace: true })
          }, 1000)
        }}
      >
        {({ errors, touched }) => (
          <Form className="space-y-4">
            <div className="space-y-2">
              <Input
                id="email"
                name="email"
                type="email"
                placeholder="Email"
                className={errors.email && touched.email ? "border-red-500" : ""}
              />
              {errors.email && touched.email && <div className="text-red-500">{errors.email}</div>}
            </div>
            <div className="space-y-2">
              <Input
                id="password"
                name="password"
                type="password"
                placeholder="Password"
                className={errors.password && touched.password ? "border-red-500" : ""}
              />
              {errors.password && touched.password && <div className="text-red-500">{errors.password}</div>}
            </div>
            <Button type="submit">Login</Button>
          </Form>
        )}
      </Formik>
    </div>
  )
}
